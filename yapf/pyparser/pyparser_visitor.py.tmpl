# Copyright 2022 Bill Wendling, All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""AST visitor template.

This is a template for a pyparser visitor. Example use:

    import ast
    from io import StringIO

    from yapf.pyparser import pyparser_visitor

    def parse_code(source, filename):
        ast_tree = ast.parse(source, filename)
        readline = StringIO(source).readline
        tokens = tokenize.generate_tokens(readline)
        logical_lines = _CreateLogicalLines(tokens)

        pyparser_visitor.Visitor(logical_lines).visit(ast_tree)
"""

import ast


# This is a skeleton of an AST visitor.
class Visitor(ast.NodeVisitor):
  """Compute split penalties between tokens."""

  def __init__(self, logical_lines):
    super(Visitor, self).__init__()
    self.logical_lines = logical_lines

  ############################################################################
  # Statements                                                               #
  ############################################################################

  def visit_FunctionDef(self, node):
    # FunctionDef(name=Name,
    #             args=arguments(
    #                 posonlyargs=[],
    #                 args=[],
    #                 vararg=[],
    #                 kwonlyargs=[],
    #                 kw_defaults=[],
    #                 defaults=[]),
    #             body=[...],
    #             decorator_list=[Expr_1, Expr_2, ..., Expr_n],
    #             keywords=[])
    return self.generic_visit(node)

  def visit_AsyncFunctionDef(self, node):
    # AsyncFunctionDef(name=Name,
    #                  args=arguments(
    #                      posonlyargs=[],
    #                      args=[],
    #                      vararg=[],
    #                      kwonlyargs=[],
    #                      kw_defaults=[],
    #                      defaults=[]),
    #                  body=[...],
    #                  decorator_list=[Expr_1, Expr_2, ..., Expr_n],
    #                  keywords=[])
    return self.generic_visit(node)

  def visit_ClassDef(self, node):
    # ClassDef(name=Name,
    #          bases=[Expr_1, Expr_2, ..., Expr_n],
    #          keywords=[],
    #          body=[],
    #          decorator_list=[Expr_1, Expr_2, ..., Expr_m])
    return self.generic_visit(node)

  def visit_Return(self, node):
    # Return(value=Expr)
    return self.generic_visit(node)

  def visit_Delete(self, node):
    # Delete(targets=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_Assign(self, node):
    # Assign(targets=[Expr_1, Expr_2, ..., Expr_n],
    #        value=Expr)
    return self.generic_visit(node)

  def visit_AugAssign(self, node):
    # AugAssign(target=Name,
    #           op=Add(),
    #           value=Expr)
    return self.generic_visit(node)

  def visit_AnnAssign(self, node):
    # AnnAssign(target=Name,
    #           annotation=TypeName,
    #           value=Expr,
    #           simple=number)
    return self.generic_visit(node)

  def visit_For(self, node):
    # For(target=Expr,
    #     iter=Expr,
    #     body=[...],
    #     orelse=[...])
    return self.generic_visit(node)

  def visit_AsyncFor(self, node):
    # AsyncFor(target=Expr,
    #          iter=Expr,
    #          body=[...],
    #          orelse=[...])
    return self.generic_visit(node)

  def visit_While(self, node):
    # While(test=Expr,
    #       body=[...],
    #       orelse=[...])
    return self.generic_visit(node)

  def visit_If(self, node):
    # If(test=Expr,
    #    body=[...],
    #    orelse=[...])
    return self.generic_visit(node)

  def visit_With(self, node):
    # With(items=[withitem_1, withitem_2, ..., withitem_n],
    #      body=[...])
    return self.generic_visit(node)

  def visit_AsyncWith(self, node):
    # AsyncWith(items=[withitem_1, withitem_2, ..., withitem_n],
    #           body=[...])
    return self.generic_visit(node)

  def visit_Match(self, node):
    # Match(subject=Expr,
    #       cases=[
    #           match_case(
    #               pattern=pattern,
    #               guard=Expr,
    #               body=[...]),
    #             ...
    #       ])
    return self.generic_visit(node)

  def visit_Raise(self, node):
    # Raise(exc=Expr)
    return self.generic_visit(node)

  def visit_Try(self, node):
    # Try(body=[...],
    #     handlers=[ExceptHandler_1, ExceptHandler_2, ..., ExceptHandler_b],
    #     orelse=[...],
    #     finalbody=[...])
    return self.generic_visit(node)

  def visit_Assert(self, node):
    # Assert(test=Expr)
    return self.generic_visit(node)

  def visit_Import(self, node):
    # Import(names=[
    #            alias(
    #                name=Identifier,
    #                asname=Identifier),
    #              ...
    #        ])
    return self.generic_visit(node)

  def visit_ImportFrom(self, node):
    # ImportFrom(module=Identifier,
    #            names=[
    #                alias(
    #                    name=Identifier,
    #                    asname=Identifier),
    #                  ...
    #            ],
    #            level=num
    return self.generic_visit(node)

  def visit_Global(self, node):
    # Global(names=[Identifier_1, Identifier_2, ..., Identifier_n])
    return self.generic_visit(node)

  def visit_Nonlocal(self, node):
    # Nonlocal(names=[Identifier_1, Identifier_2, ..., Identifier_n])
    return self.generic_visit(node)

  def visit_Expr(self, node):
    # Expr(value=Expr)
    return self.generic_visit(node)

  def visit_Pass(self, node):
    # Pass()
    return self.generic_visit(node)

  def visit_Break(self, node):
    # Break()
    return self.generic_visit(node)

  def visit_Continue(self, node):
    # Continue()
    return self.generic_visit(node)

  ############################################################################
  # Expressions                                                              #
  ############################################################################

  def visit_BoolOp(self, node):
    # BoolOp(op=And | Or,
    #        values=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_NamedExpr(self, node):
    # NamedExpr(target=Name,
    #           value=Expr)
    return self.generic_visit(node)

  def visit_BinOp(self, node):
    # BinOp(left=LExpr
    #       op=Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift |
    #          RShift | BitOr | BitXor | BitAnd | FloorDiv
    #       right=RExpr)
    return self.generic_visit(node)

  def visit_UnaryOp(self, node):
    # UnaryOp(op=Not | USub | UAdd | Invert,
    #         operand=Expr)
    return self.generic_visit(node)

  def visit_Lambda(self, node):
    # Lambda(args=arguments(
    #            posonlyargs=[],
    #            args=[
    #                arg(arg='a'),
    #                arg(arg='b')],
    #            kwonlyargs=[],
    #            kw_defaults=[],
    #            defaults=[]),
    #        body=Expr)
    return self.generic_visit(node)

  def visit_IfExp(self, node):
    # IfExp(test=TestExpr,
    #       body=BodyExpr,
    #       orelse=OrElseExpr)
    return self.generic_visit(node)

  def visit_Dict(self, node):
    # Dict(keys=[Expr_1, Expr_2, ..., Expr_n],
    #      values=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_Set(self, node):
    # Set(elts=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_ListComp(self, node):
    # ListComp(elt=Expr,
    #          generators=[
    #              comprehension(
    #                  target=Expr,
    #                  iter=Expr,
    #                  ifs=[Expr_1, Expr_2, ..., Expr_n],
    #                  is_async=0),
    #               ...
    #          ])
    return self.generic_visit(node)

  def visit_SetComp(self, node):
    # SetComp(elt=Expr,
    #         generators=[
    #             comprehension(
    #                 target=Expr,
    #                 iter=Expr,
    #                 ifs=[Expr_1, Expr_2, ..., Expr_n],
    #                 is_async=0),
    #           ...
    #         ])
    return self.generic_visit(node)

  def visit_DictComp(self, node):
    # DictComp(key=KeyExpr,
    #          value=ValExpr,
    #          generators=[
    #              comprehension(
    #                  target=TargetExpr
    #                  iter=IterExpr,
    #                  ifs=[Expr_1, Expr_2, ..., Expr_n]),
    #                  is_async=0)],
    #           ...
    #         ])
    return self.generic_visit(node)

  def visit_GeneratorExp(self, node):
    # GeneratorExp(elt=Expr,
    #              generators=[
    #                  comprehension(
    #                      target=Expr,
    #                      iter=Expr,
    #                      ifs=[Expr_1, Expr_2, ..., Expr_n],
    #                      is_async=0),
    #                ...
    #              ])
    return self.generic_visit(node)

  def visit_Await(self, node):
    # Await(value=Expr)
    return self.generic_visit(node)

  def visit_Yield(self, node):
    # Yield(value=Expr)
    return self.generic_visit(node)

  def visit_YieldFrom(self, node):
    # YieldFrom(value=Expr)
    return self.generic_visit(node)

  def visit_Compare(self, node):
    # Compare(left=LExpr,
    #         ops=[Op_1, Op_2, ..., Op_n],
    #         comparators=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_Call(self, node):
    # Call(func=Expr,
    #      args=[Expr_1, Expr_2, ..., Expr_n],
    #      keywords=[
    #          keyword(
    #              arg='d',
    #              value=Expr),
    #            ...
    #      ])
    return self.generic_visit(node)

  def visit_FormattedValue(self, node):
    # FormattedValue(value=Expr,
    #                conversion=-1,
    #                format_spec=FSExpr)
    return self.generic_visit(node)

  def visit_JoinedStr(self, node):
    # JoinedStr(values=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_Constant(self, node):
    # Constant(value=Expr)
    return self.generic_visit(node)

  def visit_Attribute(self, node):
    # Attribute(value=Expr,
    #           attr=Identifier)
    return self.generic_visit(node)

  def visit_Subscript(self, node):
    # Subscript(value=VExpr,
    #           slice=SExpr)
    return self.generic_visit(node)

  def visit_Starred(self, node):
    # Starred(value=Expr)
    return self.generic_visit(node)

  def visit_Name(self, node):
    # Name(id=Identifier)
    return self.generic_visit(node)

  def visit_List(self, node):
    # List(elts=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_Tuple(self, node):
    # Tuple(elts=[Expr_1, Expr_2, ..., Expr_n])
    return self.generic_visit(node)

  def visit_Slice(self, node):
    # Slice(lower=Expr,
    #       upper=Expr,
    #       step=Expr)
    return self.generic_visit(node)

  ############################################################################
  # Expression Context                                                       #
  ############################################################################

  def visit_Load(self, node):
    # Load()
    return self.generic_visit(node)

  def visit_Store(self, node):
    # Store()
    return self.generic_visit(node)

  def visit_Del(self, node):
    # Del()
    return self.generic_visit(node)

  ############################################################################
  # Boolean Operators                                                        #
  ############################################################################

  def visit_And(self, node):
    # And()
    return self.generic_visit(node)

  def visit_Or(self, node):
    # Or()
    return self.generic_visit(node)

  ############################################################################
  # Binary Operators                                                         #
  ############################################################################

  def visit_Add(self, node):
    # Add()
    return self.generic_visit(node)

  def visit_Sub(self, node):
    # Sub()
    return self.generic_visit(node)

  def visit_Mult(self, node):
    # Mult()
    return self.generic_visit(node)

  def visit_MatMult(self, node):
    # MatMult()
    return self.generic_visit(node)

  def visit_Div(self, node):
    # Div()
    return self.generic_visit(node)

  def visit_Mod(self, node):
    # Mod()
    return self.generic_visit(node)

  def visit_Pow(self, node):
    # Pow()
    return self.generic_visit(node)

  def visit_LShift(self, node):
    # LShift()
    return self.generic_visit(node)

  def visit_RShift(self, node):
    # RShift()
    return self.generic_visit(node)

  def visit_BitOr(self, node):
    # BitOr()
    return self.generic_visit(node)

  def visit_BitXor(self, node):
    # BitXor()
    return self.generic_visit(node)

  def visit_BitAnd(self, node):
    # BitAnd()
    return self.generic_visit(node)

  def visit_FloorDiv(self, node):
    # FloorDiv()
    return self.generic_visit(node)

  ############################################################################
  # Unary Operators                                                          #
  ############################################################################

  def visit_Invert(self, node):
    # Invert()
    return self.generic_visit(node)

  def visit_Not(self, node):
    # Not()
    return self.generic_visit(node)

  def visit_UAdd(self, node):
    # UAdd()
    return self.generic_visit(node)

  def visit_USub(self, node):
    # USub()
    return self.generic_visit(node)

  ############################################################################
  # Comparison Operators                                                     #
  ############################################################################

  def visit_Eq(self, node):
    # Eq()
    return self.generic_visit(node)

  def visit_NotEq(self, node):
    # NotEq()
    return self.generic_visit(node)

  def visit_Lt(self, node):
    # Lt()
    return self.generic_visit(node)

  def visit_LtE(self, node):
    # LtE()
    return self.generic_visit(node)

  def visit_Gt(self, node):
    # Gt()
    return self.generic_visit(node)

  def visit_GtE(self, node):
    # GtE()
    return self.generic_visit(node)

  def visit_Is(self, node):
    # Is()
    return self.generic_visit(node)

  def visit_IsNot(self, node):
    # IsNot()
    return self.generic_visit(node)

  def visit_In(self, node):
    # In()
    return self.generic_visit(node)

  def visit_NotIn(self, node):
    # NotIn()
    return self.generic_visit(node)

  ############################################################################
  # Exception Handler                                                        #
  ############################################################################

  def visit_ExceptionHandler(self, node):
    # ExceptHandler(type=Expr,
    #               name=Identifier,
    #               body=[...])
    return self.generic_visit(node)

  ############################################################################
  # Matching Patterns                                                        #
  ############################################################################

  def visit_MatchValue(self, node):
    # MatchValue(value=Expr)
    return self.generic_visit(node)

  def visit_MatchSingleton(self, node):
    # MatchSingleton(value=Constant)
    return self.generic_visit(node)

  def visit_MatchSequence(self, node):
    # MatchSequence(patterns=[pattern_1, pattern_2, ..., pattern_n])
    return self.generic_visit(node)

  def visit_MatchMapping(self, node):
    # MatchMapping(keys=[Expr_1, Expr_2, ..., Expr_n],
    #              patterns=[pattern_1, pattern_2, ..., pattern_m],
    #              rest=Identifier)
    return self.generic_visit(node)

  def visit_MatchClass(self, node):
    # MatchClass(cls=Expr,
    #            patterns=[pattern_1, pattern_2, ...],
    #            kwd_attrs=[Identifier_1, Identifier_2, ...],
    #            kwd_patterns=[pattern_1, pattern_2, ...])
    return self.generic_visit(node)

  def visit_MatchStar(self, node):
    # MatchStar(name=Identifier)
    return self.generic_visit(node)

  def visit_MatchAs(self, node):
    # MatchAs(pattern=pattern,
    #         name=Identifier)
    return self.generic_visit(node)

  def visit_MatchOr(self, node):
    # MatchOr(patterns=[pattern_1, pattern_2, ...])
    return self.generic_visit(node)

  ############################################################################
  # Type Ignore                                                              #
  ############################################################################

  def visit_TypeIgnore(self, node):
    # TypeIgnore(tag=string)
    return self.generic_visit(node)

  ############################################################################
  # Miscellaneous                                                            #
  ############################################################################

  def visit_comprehension(self, node):
    # comprehension(target=Expr,
    #               iter=Expr,
    #               ifs=[Expr_1, Expr_2, ..., Expr_n],
    #               is_async=0)
    return self.generic_visit(node)

  def visit_arguments(self, node):
    # arguments(posonlyargs=[],
    #           args=[],
    #           vararg=arg,
    #           kwonlyargs=[],
    #           kw_defaults=[],
    #           kwarg=arg,
    #           defaults=[]),
    return self.generic_visit(node)

  def visit_arg(self, node):
    # arg(arg=Identifier,
    #     annotation=Expr,
    #     type_comment='')
    return self.generic_visit(node)

  def visit_keyword(self, node):
    # keyword(arg=Identifier,
    #         value=Expr)
    return self.generic_visit(node)

  def visit_alias(self, node):
    # alias(name=Identifier,
    #       asname=Identifier)
    return self.generic_visit(node)

  def visit_withitem(self, node):
    # withitem(context_expr=Expr,
    #          optional_vars=Expr)
    return self.generic_visit(node)

  def visit_match_case(self, node):
    # match_case(pattern=pattern,
    #            guard=Expr,
    #            body=[...])
    return self.generic_visit(node)
